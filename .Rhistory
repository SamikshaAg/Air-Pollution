my_seq5
my_seq6
my_seq7
my_seq8
#sequence from 1 to 20
my_seq1<-1:20
#sequence from 1 to 20 using seq() function
my_seq2<-seq(1,20)
#sequence from 1 to 20 incremented by 0.5
my_seq3<-seq(1,20,by=0.5)
#sequence of 30 numbers between 5 and 10
my_seq4<-seq(5,10,length=30)
#sequence of numbers with length as the length of along.with argument
my_seq5<-seq(along.with=my_seq4)
#alternative function to the above type
my_seq6<-seq_along(my_seq4)
#replicate function
my_seq7<-rep(0,times=10)
#replicating each element of the given vector 10 times
my_seq8<-rep(c(0,1,2),each=10)
#printing all the sequence variables
my_seq1
my_seq2
my_seq3
my_seq4
my_seq5
my_seq6
my_seq7
my_seq8
library(swirl)
swirl()
my_name=c(my_char,"Samiksha")
my_name
paste(my_char,collapse=" "!)
paste(my_char,collapse=" ")
paste(my_name,collapse=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
my_char<-c("My","name","is")
concat1<-paste(my_char,collapse=" ")
my_name<-c(my_char,"Samiksha!!!")
concat2<-paste(my_name,collapse=" ")
concat3<-paste(LETTERS,1:4,sep="-")
concat1
concat2
concat3
#vector of characters
my_char<-c("My","name","is")
#concating elements of my_char vector into 1 string and each element separated by a single space
concat1<-paste(my_char,collapse=" ")
#adding a new element to my_char vector
my_name<-c(my_char,"Samiksha!!!")
#concating as above
concat2<-paste(my_name,collapse=" ")
#concating elements of two vectors separated by "-"
concat3<-paste(LETTERS,1:4,sep="-")
#printing all the strings
concat1
concat2
concat3
swirl()
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
play()
?rnorm
nxt()
z<-rep(NA,times=1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x<-c(rnorm(20),rep(NA,20))
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo,"bar,"norf")
names(vect2)<-c("foo,"bar","norf")
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes()
attributes(my_vector)
my_vector
class()
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(cnames)
colnames(my_data)
colnames(my_data)<-cnames
my_data
library(DAAG)
library(datasets)
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5>8 || 6!=8 && 4>3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function()
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
submit()
submit()
submit()
evaluate()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
submit()
submit()
telegram("HOLA","SAMIKSHA")
submit()
mad_libs("hi","Hello","hola")
submit()
'I' "%p%" "love" "%p%" "R!"
'I' '%p%' 'love' '%p%' 'R!'
` 'I' '%p%' 'love' '%p%' 'R!' `
` 'I' %p% 'love' %p% 'R!' `
'I' %p% 'love' %p% 'R!'
d1 <- Sys.Date()
class()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17,1986 08:24"
t3 <- "October 17, 1986 08:24"
?strptime
strptime(t3, "%B %d, %Y %H:%M")
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(), t1, units= 'days')
cube <- function(x,n)
{}
cube <- function(x,n)
{}
cube <- function(x,n)
{ x^3 }
cube(3)
x <- 1:10
if(x>5)
{ x <- 0 }
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
pollutant_mean<- function(directory,pollutant,id=1:332){
sumall<-0
len<-0
folder<- "E:/Coursera/specdata"
file_list<-list.files(path=folder,pattern = "*.csv")
for(i in seq_along(id)){
assign(file_list[id[i]],read.csv(paste(folder,file_list[id[i]],sep='/')))
final<-assign(file_list[id[i]],read.csv(paste(folder,file_list[id[i]],sep='/')))
sums<-sum(final[,pollutant],na.rm = T)
x<-!is.na(final[,pollutant])
y<-x
len=len+length(y[x==TRUE])
sumall=sumall+sums
}
sumall/len
}
pollutant_mean("specdata","nitrate",70:72)
pollutant_mean("specdata","nitrate",23)
pollutant_mean<- function(directory,pollutant,id=1:332){
sumall<-0
len<-0
folder<- "E:/Coursera/specdata"
file_list<-list.files(path=folder,pattern = "*.csv")
for(i in seq_along(id)){
final<-assign(file_list[id[i]],read.csv(paste(folder,file_list[id[i]],sep='/')))
sums<-sum(final[,pollutant],na.rm = T)
x<-!is.na(final[,pollutant])
y<-x
len=len+length(y[x==TRUE])
sumall=sumall+sums
}
sumall/len
}
pollutant_mean("specdata","nitrate",23)
pollutant_mean("specdata","nitrate",70:72)
library(swirl)
rm(list=ls())
swirl()
install.packages("devtools")
install.packages("devtools")
install.packages(devtools)
install.packages("devtools")
library(devtools)
library(swirl)
swirl()
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir<-getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
args(file.rename())
args(file.rename())
args(file.rename)
file.rename("mytest.R","mytest2.R")
args(file.copy)
file.copy("mytest2.R","mytest3.R")
file.path("Desktop/mytest.R")
file.path("mytest.R")
info()
?file.path
file.path("C:\Users\Samiksha\Documents\testdir\mytest3.R")
file.path("Desktop\mytest3.R")
file.path("Desktop/mytest3.R")
file.path("mytest3.R")
file.path('folder1','folder2')
?dir.create
dir.create("testdir2","testdir3",recursive=TRUE)
dir.create(file.path("testdir2","testdir3"),recursive=TRUE)
setwd("old.dir")
setwd(old.dir)
unlink("testdir",recursive = TRUE)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect<1
tf
num_vect>=6
my_char <- ("My","name","is")
my_char <- ("My","name","is")
my_char <- c("My","name","is")
my_char
paste(my_char,collapse=" ")
bye
setwd("E:/Coursera/assignment")
getwd()
corr("specdata",25)
ls()
list.files()
corr.R
corr <- function(directory, threshold=0)
{
folder <- "E:/Coursera/assignment/specdata"
file_list <- list.files(path=folder,pattern = "*.csv")
res <- numeric()
for(i in seq_along(file_list))
{
final <- assign(file_list[i],read.csv(paste(folder,file_list[i],sep='/')))
x <- final[,"sulfate"]
y <- final[,"nitrate"]
comp <- complete.cases(x,y)
z <- comp
len <- length(z[comp==TRUE])
res1 <- x[comp]
res2 <- y[comp]
if(len>threshold)
{
correlation <- cor(res1, res2)
res <- c(res,correlation)
}
}
res
}
corr("specdata",25)
?rnorm
corr <- function(directory, threshold=0)
{
folder <- "E:/Coursera/assignment/specdata"
file_list <- list.files(path=folder,pattern = "*.csv")
res <- numeric()
for(i in seq_along(file_list))
{
final <- assign(file_list[i],read.csv(paste(folder,file_list[i],sep='/')))
x <- final[,"sulfate"]
y <- final[,"nitrate"]
comp <- complete.cases(x,y)
z <- comp
len <- length(z[comp==TRUE])
res1 <- x[comp]
res2 <- y[comp]
if(len>threshold)
{
correlation <- cor(res1, res2)
res <- c(res,correlation)
}
}
res
}
setwd
setwd()
x<-list(matrix(6,2,3),matrix(6,3,2))
x
x<-list(matrix(1:6,2,3),matrix(7:12,3,2))
x
x[[c(1,)]]
x[[1]]
x[[1,2]]
x[[c(1,x[,1])]]
x[[c(1,x[[,1]])]]
x[1]
x[1,2]
x[1,x[,1]]
m1<-x[[1]]
m1
m1[,1]
m1[[,1]]
m1
class(m1)
m2<-as.data.frame(m1)
class(m2)
m2[[,1]]
m2[,1]
library(swirl)
swirl()
2
bye
swirl()
head(flags,6)
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,6,6))
unique(c(3,4,5,5,5,6,6))
lapply(flags,unique)
unique_vals<-lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
bye
exists()
bye()
mat1<-matrix(rnorm(200),20,10)
lis1<-as.list(mat1)
lis1
mat1
lapply(mat1,mean)
mat1
lis1<-1:5
lapply(lis1,rep)
?rep
lapply(lis1,rep,times=3)
lapply(lis1,rep,each=3)
swirl()
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
rm(ls())
